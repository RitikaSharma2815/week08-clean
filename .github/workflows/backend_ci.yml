# .github/workflows/backend_ci.yml
name: Backend CI â€” test (always) + build/push (when secrets exist)

on:
  workflow_dispatch:
  push:
    branches: [ dev ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend_ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend_ci.yml'

# Keep tokens least-privileged (OIDC needed for azure/login)
permissions:
  contents: read
  id-token: write

# Prevent duplicate CI runs on same ref
concurrency:
  group: backend-ci-${{ github.ref }}
  cancel-in-progress: true

env:
  # Registry values are optional for CI; build/push will run only if present
  ACR_NAME: ${{ secrets.ACR_NAME }}
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
  IMAGE_TAG: ${{ github.sha }}-${{ github.run_id }}

jobs:
  test_and_lint_backends:
    runs-on: ubuntu-latest

    services:
      product_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: products
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports: [ "5432:5432" ]

      order_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: orders
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports: [ "5433:5432" ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-py310-${{ hashFiles('backend/**/requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-py310-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          for req in backend/*/requirements.txt; do
            echo "Installing $req"
            pip install -r "$req"
          done
          pip install pytest httpx

      - name: Run product_service tests
        working-directory: backend/product_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: products
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest tests --maxfail=1 --disable-warnings -q

      - name: Run order_service tests
        working-directory: backend/order_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5433
          POSTGRES_DB: orders
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest tests --maxfail=1 --disable-warnings -q

        build_and_push_images:
          if: ${{ success() && secrets.AZURE_CREDENTIALS != '' && secrets.ACR_NAME != '' && secrets.ACR_LOGIN_SERVER != '' }}
          runs-on: ubuntu-latest
          needs: test_and_lint_backends
      
          steps:
            - name: Verify secrets are set
              run: |
                echo "AZURE_CREDENTIALS=${{ secrets.AZURE_CREDENTIALS }}"
                echo "ACR_NAME=${{ secrets.ACR_NAME }}"
                echo "ACR_LOGIN_SERVER=${{ secrets.ACR_LOGIN_SERVER }}"
      
            - name: Checkout repository
              uses: actions/checkout@v4
      
            - name: Azure Login (OIDC)
              uses: azure/login@v2
              with:
                creds: ${{ secrets.AZURE_CREDENTIALS }}
      
            - name: Login to Azure Container Registry
              run: az acr login --name "${{ env.ACR_NAME }}"
      
            - name: Build and Push Product Service Image
              run: |
                docker build -t "${{ env.ACR_LOGIN_SERVER }}/product_service:${{ env.IMAGE_TAG }}" ./backend/product_service/
                docker tag "${{ env.ACR_LOGIN_SERVER }}/product_service:${{ env.IMAGE_TAG }}" "${{ env.ACR_LOGIN_SERVER }}/product_service:latest"
                docker push "${{ env.ACR_LOGIN_SERVER }}/product_service:${{ env.IMAGE_TAG }}"
                docker push "${{ env.ACR_LOGIN_SERVER }}/product_service:latest"
      
            - name: Build and Push Order Service Image
              run: |
                docker build -t "${{ env.ACR_LOGIN_SERVER }}/order_service:${{ env.IMAGE_TAG }}" ./backend/order_service/
                docker tag "${{ env.ACR_LOGIN_SERVER }}/order_service:${{ env.IMAGE_TAG }}" "${{ env.ACR_LOGIN_SERVER }}/order_service:latest"
                docker push "${{ env.ACR_LOGIN_SERVER }}/order_service:${{ env.IMAGE_TAG }}"
                docker push "${{ env.ACR_LOGIN_SERVER }}/order_service:latest"
      
            - name: Azure Logout
              if: always()
              run: az logout
      