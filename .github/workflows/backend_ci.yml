# .github/workflows/backend_ci.yml
name: Backend CI â€” test on dev/PR, build+push on main (if secrets)

on:
  workflow_dispatch:
  push:
    branches: [ dev, main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend_ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend_ci.yml'

permissions:
  contents: read
  id-token: write

concurrency:
  group: backend-ci-${{ github.ref }}
  cancel-in-progress: true

env:
  IMAGE_TAG: ${{ github.sha }}-${{ github.run_id }}

jobs:
  # --- CI: run tests for product & order services (always for dev/PR/main) ---
  test_and_lint_backends:
    runs-on: ubuntu-latest

    services:
      product_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: products
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports: [ "5432:5432" ]

      order_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: orders
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports: [ "5433:5432" ]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          for req in backend/*/requirements.txt; do
            echo "Installing $req"
            pip install -r "$req"
          done
          pip install pytest httpx

      - name: Run product_service tests
        working-directory: backend/product_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: products
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest tests --maxfail=1 --disable-warnings -q

      - name: Run order_service tests
        working-directory: backend/order_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5433
          POSTGRES_DB: orders
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest tests --maxfail=1 --disable-warnings -q

  # --- Decide if we should push images (only on main + secrets exist) ---
  decide_push:
    runs-on: ubuntu-latest
    needs: test_and_lint_backends
    outputs:
      PUSH_OK: ${{ steps.chk.outputs.push_ok }}
    steps:
      - id: chk
        env:
          BRANCH_REF: ${{ github.ref }}
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
          ACR_NAME: ${{ secrets.ACR_NAME }}
          ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
        run: |
          set -euo pipefail
          ok="false"
          if [ "$BRANCH_REF" = "refs/heads/main" ] && \
             [ -n "${AZURE_CREDENTIALS:-}" ] && \
             [ -n "${ACR_NAME:-}" ] && \
             [ -n "${ACR_LOGIN_SERVER:-}" ]; then
            ok="true"
          fi
          echo "push_ok=$ok" >> "$GITHUB_OUTPUT"
          echo "Decision: push_ok=$ok"

  # --- Build & push images (only when PUSH_OK == true) ---
  build_and_push_images:
    runs-on: ubuntu-latest
    needs: [test_and_lint_backends, decide_push]
    if: ${{ needs.decide_push.outputs.PUSH_OK == 'true' }}

    steps:
      - uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to Azure Container Registry
        run: az acr login --name "${{ secrets.ACR_NAME }}"

      - name: Build and Push Product Service Image
        run: |
          docker build -t "${{ secrets.ACR_LOGIN_SERVER }}/product_service:latest" ./backend/product_service/
          docker push "${{ secrets.ACR_LOGIN_SERVER }}/product_service:latest"

      - name: Build and Push Order Service Image
        run: |
          docker build -t "${{ secrets.ACR_LOGIN_SERVER }}/order_service:latest" ./backend/order_service/
          docker push "${{ secrets.ACR_LOGIN_SERVER }}/order_service:latest"

      - name: Azure Logout
        if: always()
        run: az logout